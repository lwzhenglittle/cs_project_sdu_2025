pragma circom 2.0.0;

template SBox() {
    signal input in;
    signal output out;
    signal tmp1 <== in * in;
    signal tmp2 <== tmp1 * tmp1;
    out <== tmp2 * in;
}

template MatMul3() {
    signal input state[3];
    signal output out[3];
    out[0] <== 2 * state[0] + state[1] + state[2];
    out[1] <== state[0] + 2 * state[1] + state[2];
    out[2] <== state[0] + state[1] + 3 * state[2];
}

template AddConstants(t, round) {
    signal input state[t];
    signal output out[t];
    var constants[64][3] = [
        [7511745149465107256748700652201246547602992235648026721272843186785854329919, 11582513782717859949989652350546266020659506321085354866607073009322906267633, 18607109726139323071681088394088844772100047507952080693919080764834978087821],
        [5896126634309692842996100756085303516119816552090065963994899524032265041015, 7413958914743076468434949016887659851636926799654987374946717485779043686938, 13913211763280912830166600140616094527978985951969069697045905688336020851021],
        [15066983396946633325779633640973275248075871685558470073002919966302439956398, 2088820695928659015768037999866041501440936516080893024406804503000145008799, 16859982259234905948547516165969840097005635671781985509654928176618424370419],
        [2387030644030928094780061066721896157767653623238900915510839754668012892252, 10051008473327743717983085845084020986967226924155969610854839169197406691698, 5437103020726074892279089506252080287320024502722511469726264428677644506936],
        [13877498627108434160624858238654976776740234157743994024653152456329896473728, 0, 0],
        [6653228300937701152896564764488745395015848491982655075309500493435406089018, 0, 0],
        [9899806808797842652226990827667770527983671196470938020316435527813486449627, 0, 0],
        [1013031124872092006506540106205536969007793096725513871234900017616959671742, 0, 0],
        [3883462669308624899639467173374570329648300700764025912043491770127959671957, 0, 0],
        [5866094451421204424725801970012885329050655421737763850635522120618085194016, 0, 0],
        [18234633225267985076059709346424670462636067636073745041522583010915914815521, 0, 0],
        [5364064804825999616020925251264589065063736697043770632095027461058461133509, 0, 0],
        [19486736210204678537346945263632011103623725226265651468734264165501336476646, 0, 0],
        [12817481025845013064142376556064965962924133433542142096063982899204514970533, 0, 0],
        [10901125966067128376926062507965802890342847866997265470092912598068671905778, 0, 0],
        [2327008721516015069710797157802174012761754984456624507808914039222652316799, 0, 0],
        [5986255721570849991096102949128226176423329536584072090851248671334015063012, 0, 0],
        [9063104788989022932717197097623395495889549831439066151432506847120651569642, 0, 0],
        [10449641850501011851930341951066779265903815536668771506493847671985169090418, 0, 0],
        [2866598097906395778087851088804925080701406508263421439850686176924431007822, 0, 0],
        [18842978638584537953843816893128073984074065554449568899325792159950044264648, 0, 0],
        [11975066983779577281334615242001265346316473889789370796024194749629998928058, 0, 0],
        [6649331036691520398639103992993005398103016583157780598734089524709007030885, 0, 0],
        [10329309090637016628935717395493842951726491844969853003063699547120950041058, 0, 0],
        [18695963815073270421043570930825624994897980905701866468695892481050589374932, 0, 0],
        [20913899153896903831686925456625986936653947030066046076119096862033778932096, 0, 0],
        [9988632536495354163968901344978052084651161577969128031717985476893862055845, 0, 0],
        [15522481671502580639928916102013846043027842653237074076388906473468830004928, 0, 0],
        [6404080896953556650013064765719998851370050624644430628344589847891863509756, 0, 0],
        [6593353715866932481135899949127617269556854797651616669969278598408893103743, 0, 0],
        [12003977306009741570568628242063944344862043962925695151070982522823866999937, 0, 0],
        [7710946984158491055842263024704426994982302537194508069433016896765158088127, 0, 0],
        [19239766903959041738502387885862473804068327648002615816746710005670149011292, 0, 0],
        [15430598426618999828906994476113900030788308829962946509969651068503959139094, 0, 0],
        [21306709886117983267962831128976847094488893030654076897851797263547421477088, 0, 0],
        [1853078491946924838302695843675090877406928436893070830074649509015506659826, 0, 0],
        [15906068772457820962598096157667067705654621075862663616308847896002667721644, 0, 0],
        [6829267948320300686892829151336580842765264946070996717688157688124329866654, 0, 0],
        [20994308968344547999980095686915765370527962251725157726379721005033854862700, 0, 0],
        [11851978048966003449949830962081433863736151398885701019901081031096477663896, 0, 0],
        [13063421765973624893076648266329139659380946394695652157862577577715951845442, 0, 0],
        [14056806742266678493428436854030080903070090853542043406726468027853251013628, 0, 0],
        [10742329204399436439996031996845641502844823547880701089421593899167892962342, 0, 0],
        [12636236969821230827815825928628796844230558031815997529012050344088488071750, 0, 0],
        [6103949863288762992876140088503946159986736020766913046946397199710424982916, 0, 0],
        [3325772842096889513850459336999166842015607095781663765893244157880968003036, 0, 0],
        [16827641596362924032652686932033928847476264950027097536265863476976634068698, 0, 0],
        [6885832005011652461700056488689928985244815654968308439683084800506951778642, 0, 0],
        [15950899265844467959516778950024924074796779036449329924598462726226139169652, 0, 0],
        [17020633097507406495157015481012568999651987871041503871159976994457849815836, 0, 0],
        [10399598376527506969089014062444169641577095690899066051880775925327064488706, 0, 0],
        [10103896208998994649088169071838068728470734374885804829978734547820027871100, 0, 0],
        [19831806435231421066110055816866398052085486066671945670097027547020516945748, 0, 0],
        [15088925726090016681242659395761623041717644949967850071877885951959669636556, 0, 0],
        [12644820684486075542369743623362593151527996023449838329013994736675987528404, 0, 0],
        [11900700062362726050089188161915893866808659456888816103885070671003398503996, 0, 0],
        [12629026806024411598016815997766506068080831816633618399701945058935003768292, 0, 0],
        [1967988952030616529993814997063831074720923986137536127166709580844157306026, 0, 0],
        [2950651829985827982033936509962089667169830334048513509690068808648736915572, 0, 0],
        [3992306509653081090963103959879938967055993778208522721624925936728926847564, 0, 0],
        [8055982013893168502491140103906468701970946106624808671806019457616041832652, 0, 0],
        [10651203226699024008616426936764985063408844041226436067900989871016023251188, 0, 0],
        [2845041380553847625005995778263266275536726201992966423275825568074862043908, 14070324468495989439838014646994006080928968736151998267096825618629688741948, 21066610084967281764647635012906827084923913119715398470854936547019251816618],
        [18615709421473317165772571341230936577011570767978264853830503829052163998934, 7080396906103845071041928077733067823923036721969329103823481965140549584564, 16251969654712104462002905066507113648124096536456063598866226040003024089276],
        [10651095488803851058900969808095781495329226721308924991030063065439506700132, 14870000505226468223654073825406889906013871537488537628879341994570449779844, 5962506126983374424797506476084139632072503024138529436424095529066699951108],
        [14989488096830863169031615147060065103734663406688346468424495688316138978548, 6624325020829734889124000406924892421502554686953671742845012756065302839604, 17956845928509471652976796094726012070138671999871871700582506398734206068452]
    ];
    for (var i = 0; i < t; i++) {
        out[i] <== state[i] + constants[round][i];
    }
}

template FullRound(t, round) {
    signal input state[t];
    signal output out[t];
    component addConstants = AddConstants(t, round);
    for (var i = 0; i < t; i++) {
        addConstants.state[i] <== state[i];
    }
    component sboxes[t];
    signal afterSbox[t];
    for (var i = 0; i < t; i++) {
        sboxes[i] = SBox();
        sboxes[i].in <== addConstants.out[i];
        afterSbox[i] <== sboxes[i].out;
    }
    component matMul = MatMul3();
    for (var i = 0; i < t; i++) {
        matMul.state[i] <== afterSbox[i];
    }
    for (var i = 0; i < t; i++) {
        out[i] <== matMul.out[i];
    }
}

template PartialRound(t, round) {
    signal input state[t];
    signal output out[t];
    component addConstants = AddConstants(t, round);
    for (var i = 0; i < t; i++) {
        addConstants.state[i] <== state[i];
    }
    component sbox = SBox();
    sbox.in <== addConstants.out[0];
    signal afterSbox[t];
    afterSbox[0] <== sbox.out;
    for (var i = 1; i < t; i++) {
        afterSbox[i] <== addConstants.out[i];
    }
    component matMul = MatMul3();
    for (var i = 0; i < t; i++) {
        matMul.state[i] <== afterSbox[i];
    }
    for (var i = 0; i < t; i++) {
        out[i] <== matMul.out[i];
    }
}

template Poseidon2(t) {
    signal input inputs[t];
    signal output out;
    var R_F = 8;
    var R_P = 56;
    signal state[R_F + R_P + 1][t];
    for (var i = 0; i < t; i++) {
        state[0][i] <== inputs[i];
    }
    var round = 0;
    component fullRounds1[R_F/2];
    for (var r = 0; r < R_F/2; r++) {
        fullRounds1[r] = FullRound(t, round);
        for (var i = 0; i < t; i++) {
            fullRounds1[r].state[i] <== state[round][i];
        }
        for (var i = 0; i < t; i++) {
            state[round + 1][i] <== fullRounds1[r].out[i];
        }
        round++;
    }
    component partialRounds[R_P];
    for (var r = 0; r < R_P; r++) {
        partialRounds[r] = PartialRound(t, round);
        for (var i = 0; i < t; i++) {
            partialRounds[r].state[i] <== state[round][i];
        }
        for (var i = 0; i < t; i++) {
            state[round + 1][i] <== partialRounds[r].out[i];
        }
        round++;
    }
    component fullRounds2[R_F/2];
    for (var r = 0; r < R_F/2; r++) {
        fullRounds2[r] = FullRound(t, round);
        for (var i = 0; i < t; i++) {
            fullRounds2[r].state[i] <== state[round][i];
        }
        for (var i = 0; i < t;
